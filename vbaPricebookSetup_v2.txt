
'' VBA Pricebook Scripts v2



Sub notes()
  ' subs completed & tested:
  '    subName
  ' functions complteted & tested:
  '    getItemPrefix()
  '    getItemSuffix()

End Sub

Sub boneyard()
  ' scraps go here
  
End Sub

Function getSubCategory(r, c, flag) As String
  ' return "start" if flag is True
  If flag = True Then
    getSubCategory = ""
    Exit Function
  End If
  
  ' else return value of subcategory cell from data tab
  getSubCategory = Worksheets("data").Cells(r, c + 2).Value

End Function

Function getCategory(r, c, flag) As String
  ' return "start" if flag is True
  If flag = True Then
    getCategory = "start"
    Exit Function
  End If
  
  ' else return value of category cell from data tab
  getCategory = Worksheets("data").Cells(r, c + 1).Value

End Function

Function getItemPrefix(r, c, flag) As String
  ' declare local variables
  Dim trimVal As Integer
  Dim itemPrefix As String
  Set dataPtr = Worksheets("data").Cells(r, c)
  
  ' 0 - return "start" if flag is True
  If flag = True Then
    getItemPrefix = "start"
    Exit Function
  End If

  ' 1 - return na to caller if the item field is na
  If dataPtr.Value = "na" Then
    getItemPrefix = "na"
    Exit Function
  End If
  
  ' 2 - return empty to caller if the item field is null
  If dataPtr.Value = "" Then
    getItemPrefix = "empty"
    Exit Function
  End If
  
  ' 3 - return error to caller if the item field has no hyphen
  Dim s As Boolean
  s = InStr(1, dataPtr, "-", 1)
  If s = 0 Then
    getItemPrefix = "error"
    Exit Function
  End If
  
  ' 4 - return the left side of the item field
  trimVal = InStr(1, dataPtr, "-")                ' get loc of hyphen in Item
  itemPrefix = Left(dataPtr.Value, trimVal - 1)   ' get left side of Item
  getItemPrefix = itemPrefix                      ' return the prefix
  
End Function

'' POPULATE THE TEMPLATE WITH DATA FROM THE PRICEBOOK
Sub populateTemplate()
  ' declare initial local variables ====================================
  
  ' initialize vars for row and col on template tab
  Dim tRow, tCol, dRow, dCol As Integer
  tRow = 8
  tCol = 1
  dRow = 35
  dCol = 1
  
  ' set start flag to signal first run
  Dim startFlag As Boolean
  startFlag = True

  ' vars for item prefix and current item prefix
  itemPrefix = getItemPrefix(dRow, dCol, startFlag)
  Dim currItemPrefix As String
  
  ' vars for category and current category
  category = getCategory(dRow, dCol, startFlag)
  Dim currCategory As String
    
  ' vars for subcategory and current subcategory
  subCategory = getSubCategory(dRow, dCol, startFlag)
  Dim currSubCategory As String
    
  ' flip start flag to false
  startFlag = False
  
  ' end declare initial local variables ====
  
    '===========================================
  ' get itemPrefix
  ' get category
  
  ' while Item != "" <-- outer loop
  '   initialize headers:
  '      if nuItemPrefix != itemPrefix
  '      if Sub-Category != "" then displaySubCategory
  '      else {displayCategory and if not first run (ie, dRow > 2), displayFieldNames}
  '   copy and paste records from data to template:
  '      while nuItemPrefix == itemPrefix then cnpRecord <-- inner loop
  '===========================================
    
  ' outer loop: do while itemPrefix is not null ===========================
  ' TEST create counter to control loop
  Dim count As Integer
  count = 0
  ' end test
  
  ' loop start
  Do While itemPrefix <> "empty" Or count < 100
    
    ' TEST
    count = count + 1
    If count = 6 Then
      itemPrefix = ""
      Exit Do
    End If
    ' end test
    
    currItemPrefix = getItemPrefix(dRow, dCol, startFlag)
    currCategory = getCategory(dRow, dCol, startFlag)
    currSubCategory = getSubCategory(dRow, dCol, startFlag)
    
    ' TEST
    Dim ct, tr, dr As String
    ct = CStr(count)
    tr = CStr(tRow)
    dr = CStr(dRow)
    ip = itemPrefix
    cip = currItemPrefix
    cat = category
    cCat = currCategory
    cSubCat = currSubCategory
    MsgBox (ct + "  " + ip + " " + cip + " " + c + " " + cc + " " + tr + " " + dr)
    

    ' insert category header if needed
    If currItemPrefix <> itemPrefix And currCategory <> category Then
      ' insert category header and promote tRow
      MsgBox ("insert category  |  promote tRow")
      tRow = tRow + 3
      
      ' insert field-names header and promote tRow
      MsgBox ("insert field-name row  |  promote tRow")
      tRow = tRow + 1
    End If
    
    ' insert subcategory header if needed
    If currItemPrefix <> itemPrefix And currSubCategory <> subCategory Then
      ' insert subCat header and promote tRow
      MsgBox ("insert subCat  |  promote tRow")
      tRow = tRow + 1
    End If
    
    ' insert records if needed
    If currItemPrefix = itemPrefix Then
      MsgBox ("insert record | promote tRow & dRow")
      tRow = tRow + 1
      dRow = dRow + 1
    '
    '   copy rows from data tab to template tab for each itemPrefix
    '
    '   if currItemPrefix = itemPrefix Then copy and paste row from data tab to template tab
    '   promote tRow, dRow
    '
    End If
    
    ' reset item prefix and category vars
    itemPrefix = currItemPrefix
    category = currCategory
    subCategory = currSubCategory
  
  Loop

  ' message success and end sub
    '
    ' TEST
         MsgBox (currItemPrefix + " | " + itemPrefix + " | " + countStr) ' TEST
    ' End Test
    '

End Sub
  

